{ Compiletime DB support }
Unit uPSC_DB;
{
This file has been generated by UnitParser v0.4, written by M. Knight.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ifps3 are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo KokUppercase(CS_)s conv unility

Licence :
This software is provided 'as-is', without any expressed or implied
warranty. In no event will the author be held liable for any damages
arising from the use of this software.
Permission is granted to anyone to use this software for any kind of
application, and to alter it and redistribute it freely, subject to
the following restrictions:
1. The origin of this software must not be misrepresented, you must
   not claim that you wrote the original software.
2. Altered source versions must be plainly marked as such, and must
   not be misrepresented as being the original software.
3. You may not create a library that uses this library as a main part
   of the program and sell that library.
4. You must have a visible line in your programs aboutbox or
   documentation that it is made using Innerfuse Script and where
   Innerfuse Pascal Script can be found.
5. This notice may not be removed or altered from any source
   distribution.

If you have any questions concerning this license write to Carlo Kok:
  ck@carlo-kok.com or try the newsserver:
  news://news.carlo-kok.com/
}
{$I PascalScript.inc}
Interface
uses
  uPSCompiler;

procedure SIRegisterTDATASET(CL: TPSPascalCompiler);
procedure SIRegisterTPARAMS(CL: TPSPascalCompiler);
procedure SIRegisterTPARAM(CL: TPSPascalCompiler);
procedure SIRegisterTGUIDFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTVARIANTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTREFERENCEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTDATASETFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTARRAYFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTADTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTOBJECTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTGRAPHICFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTMEMOFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBLOBFIELD(CL: TPSPascalCompiler);
{$IFDEF DELPHI6UP}
procedure SIRegisterTFMTBCDFIELD(CL: TPSPascalCompiler);
{$ENDIF}
procedure SIRegisterTBCDFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTVARBYTESFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBYTESFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBINARYFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTTIMEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTDATEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTDATETIMEFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTBOOLEANFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTCURRENCYFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTFLOATFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTAUTOINCFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTWORDFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTLARGEINTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTSMALLINTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTINTEGERFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTNUMERICFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTWIDESTRINGFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTSTRINGFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTFIELD(CL: TPSPascalCompiler);
procedure SIRegisterTLOOKUPLIST(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDS(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDLIST(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDDEFLIST(CL: TPSPascalCompiler);
procedure SIRegisterTFLATLIST(CL: TPSPascalCompiler);
procedure SIRegisterTINDEXDEFS(CL: TPSPascalCompiler);
procedure SIRegisterTINDEXDEF(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDDEFS(CL: TPSPascalCompiler);
procedure SIRegisterTFIELDDEF(CL: TPSPascalCompiler);
procedure SIRegisterTDEFCOLLECTION(CL: TPSPascalCompiler);
procedure SIRegisterTNAMEDITEM(CL: TPSPascalCompiler);
procedure SIRegister_DB(Cl: TPSPascalCompiler);

implementation
Uses Sysutils,langdef;

Function RegClassS(cl : TPSPascalCompiler;Const InheritsFrom,Classname : String) : TPSCompileTimeClass;
begin
Result := cl.FindClass(Classname);
if Result = nil then
  Result := cl.AddClassN(cl.FindClass(InheritsFrom),Classname)
else
  Result.ClassInheritsFrom := cl.FindClass(InheritsFrom);
end;

procedure SIRegisterTDATASET(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TCOMPONENT),Uppercase(CS_TDATASET)) do
  begin
  RegisterMethod(CS_function + ' ' + CS_ACTIVEBUFFER + ': ' + CS_PCHAR);
  RegisterMethod(CS_procedure + ' ' + CS_APPEND);
  RegisterMethod(CS_procedure + ' ' + CS_APPENDRECORD + '( ' + CS_const + ' VALUES : ' + CS_array_of_const + ')');
//  RegisterMethod(CS_function + ' ' + CS_BOOKMARKVALID( BOOKMARK : TBOOKMARK) : BOOLEAN');
  RegisterMethod(CS_procedure + ' ' + CS_CANCEL);
  RegisterMethod(CS_procedure + ' ' + CS_CHECKBROWSEMODE);
  RegisterMethod(CS_procedure + ' ' + CS_CLEARFIELDS);
  RegisterMethod(CS_procedure + ' ' + CS_CLOSE);
  RegisterMethod(CS_function + ' ' + CS_CONTROLSDISABLED + ' : ' + CS_BOOLEAN);
//  RegisterMethod(CS_function + ' ' + CS_ COMPAREBOOKMARKS( BOOKMARK1, BOOKMARK2 : TBOOKMARK) : INTEGER');
  RegisterMethod(CS_function + ' ' + CS_CREATEBLOBSTREAM + '( FIELD : ' + CS_TFIELD + '; MODE : ' + CS_TBLOBSTREAMMODE + ') : ' + CS_TSTREAM);
  RegisterMethod(CS_procedure + ' ' + CS_CURSORPOSCHANGED);
  RegisterMethod(CS_procedure + ' ' + CS_DELETE);
  RegisterMethod(CS_procedure + ' ' + CS_DISABLECONTROLS);
  RegisterMethod(CS_procedure + ' ' + CS_EDIT);
  RegisterMethod(CS_procedure + ' ' + CS_ENABLECONTROLS);
{$IFDEF DELPHI2006UP}
  RegisterMethod(CS_function + ' ' + CS_FIELDBYNAME + '( ' + CS_const + ' FIELDNAME : ' + CS_WIDESTRING + ') : ' + CS_TFIELD);
  RegisterMethod(CS_function + ' ' + CS_FINDFIELD + '( ' + CS_const + ' FIELDNAME : ' + CS_WideString + ') : ' + CS_TFIELD);
{$ELSE}
  RegisterMethod(CS_function + ' ' + CS_FIELDBYNAME + '( ' + CS_const + ' FIELDNAME : ' + CS_STRING + ') : ' + CS_TFIELD);
  RegisterMethod(CS_function + ' ' + CS_FINDFIELD + '( ' + CS_const + ' FIELDNAME : ' + CS_STRING + ') : ' + CS_TFIELD);
{$ENDIF}
  RegisterMethod(CS_function + ' ' + CS_FINDFIRST + ' : ' + CS_BOOLEAN);
  RegisterMethod(CS_function + ' ' + CS_FINDLAST + ' : ' + CS_BOOLEAN);
  RegisterMethod(CS_function + ' ' + CS_FINDNEXT + ' : ' + CS_BOOLEAN);
  RegisterMethod(CS_function + ' ' + CS_FINDPRIOR + ' : ' + CS_BOOLEAN);
  RegisterMethod(CS_procedure + ' ' + CS_FIRST);
//  RegisterMethod(CS_procedure + ' ' + CS_ FREEBOOKMARK( BOOKMARK : TBOOKMARK)');
//  RegisterMethod(CS_function + ' ' + CS_ GETBOOKMARK : TBOOKMARK');
  RegisterMethod(CS_function + ' ' + CS_GETCURRENTRECORD + '( BUFFER : ' + CS_PCHAR + ') : ' + CS_BOOLEAN);
//  RegisterMethod(CS_procedure + ' ' + CS_ GETDETAILDATASETS( LIST : TLIST)');
//  RegisterMethod(CS_procedure + ' ' + CS_ GETFIELDLIST( LIST : TLIST; const FIELDNAMES : STRING)');
//  RegisterMethod(CS_procedure + ' ' + CS_ GETDETAILLINKFIELDS( MASTERFIELDS, DETAILFIELDS : TLIST)');
//  RegisterMethod(CS_function + ' ' + CS_ GETBLOBFIELDDATA( FIELDNO : INTEGER; var BUFFER : TBLOBBYTEDATA) : INTEGER');
  RegisterMethod(CS_procedure + ' ' + CS_GETFIELDNAMES + '( LIST : ' + CS_TSTRINGS + ')');
//  RegisterMethod(CS_procedure + ' ' + CS_ GOTOBOOKMARK( BOOKMARK : TBOOKMARK)');
  RegisterMethod(CS_procedure + ' ' + CS_INSERT);
  RegisterMethod(CS_procedure + ' ' + CS_INSERTRECORD + '( ' + CS_const + ' VALUES : ' + CS_array_of_const + ')');
  RegisterMethod(CS_function + ' ' + CS_ISEMPTY + ' : ' + CS_BOOLEAN);
  RegisterMethod(CS_function + ' ' + CS_ISLINKEDTO + '( DATASOURCE : ' + CS_TDATASOURCE + ') : ' + CS_BOOLEAN);
  RegisterMethod(CS_function + ' ' + CS_ISSEQUENCED + ' : ' + CS_BOOLEAN);
  RegisterMethod(CS_procedure + ' ' + CS_LAST);
  RegisterMethod(CS_function + ' ' + CS_LOCATE + '( ' + CS_const + ' KEYFIELDS : ' + CS_String + '; ' + CS_const + ' KEYVALUES : ' + CS_VARIANT + '; OPTIONS : ' + CS_TLOCATEOPTIONS + ') : ' + CS_BOOLEAN);
  RegisterMethod(CS_function + ' ' + CS_LOOKUP + '( ' + CS_const + ' KEYFIELDS : ' + CS_String + '; ' + CS_const + ' KEYVALUES : ' + CS_VARIANT + '; ' + CS_const + ' RESULTFIELDS : ' + CS_String + ') : ' + CS_VARIANT);
  RegisterMethod(CS_function + ' ' + CS_MOVEBY + '( DISTANCE : ' + CS_INTEGER + ') : ' + CS_INTEGER);
  RegisterMethod(CS_procedure + ' ' + CS_NEXT);
  RegisterMethod(CS_procedure + ' ' + CS_OPEN);
  RegisterMethod(CS_procedure + ' ' + CS_POST);
  RegisterMethod(CS_procedure + ' ' + CS_PRIOR);
  RegisterMethod(CS_procedure + ' ' + CS_REFRESH);
//  RegisterMethod(CS_procedure + ' ' + CS_ RESYNC( MODE : TRESYNCMODE)');
  RegisterMethod(CS_procedure + ' ' + CS_SETFIELDS + '( ' + CS_const + ' VALUES : ' + CS_array_of_const + ')');
  RegisterMethod(CS_function + ' ' + CS_TRANSLATE + '( SRC, DEST : ' + CS_PCHAR + '; TOOEM : ' + CS_BOOLEAN + ') : ' + CS_INTEGER);
  RegisterMethod(CS_procedure + ' ' + CS_UPDATECURSORPOS);
  RegisterMethod(CS_procedure + ' ' + CS_UPDATERECORD);
  RegisterMethod(CS_function + ' ' + CS_UPDATESTATUS + ' : ' + CS_TUPDATESTATUS);
  RegisterProperty(Uppercase(CS_AGGFIELDS), Uppercase(CS_TFIELDS), iptr);
  RegisterProperty(Uppercase(CS_BOF), Uppercase(CS_BOOLEAN), iptr);
//  RegisterProperty(Uppercase(CS_BOOKMARK), Uppercase(CS_TBOOKMARKSTR), iptrw);
  RegisterProperty(Uppercase(CS_CANMODIFY), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_DATASETFIELD), Uppercase(CS_TDATASETFIELD), iptrw);
  RegisterProperty(Uppercase(CS_DATASOURCE), Uppercase(CS_TDATASOURCE), iptr);
  RegisterProperty(Uppercase(CS_DEFAULTFIELDS), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_DESIGNER), Uppercase(CS_TDATASETDESIGNER), iptr);
  RegisterProperty(Uppercase(CS_EOF), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_BLOCKREADSIZE), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_FIELDCOUNT), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_FIELDDEFS), Uppercase(CS_TFIELDDEFS), iptrw);
  RegisterProperty(Uppercase(CS_FIELDDEFLIST), Uppercase(CS_TFIELDDEFLIST), iptr);
  RegisterProperty(Uppercase(CS_FIELDS), Uppercase(CS_TFIELDS), iptr);
  RegisterProperty(Uppercase(CS_FIELDLIST), Uppercase(CS_TFIELDLIST), iptr);
  RegisterProperty(Uppercase(CS_FIELDVALUES), Uppercase(CS_VARIANT + ' ' + CS_String), iptrw);
  RegisterProperty(Uppercase(CS_FOUND), Uppercase(CS_BOOLEAN), iptr);
{$IFDEF DELPHI6UP}
  RegisterProperty(Uppercase(CS_ISUNIDIRECTIONAL), Uppercase(CS_BOOLEAN), iptr);
{$ENDIF}
  RegisterProperty(Uppercase(CS_MODIFIED), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_OBJECTVIEW), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_RECORDCOUNT), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_RECNO), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_RECORDSIZE), Uppercase(CS_WORD), iptr);
  RegisterProperty(Uppercase(CS_SPARSEARRAYS), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_STATE), Uppercase(CS_TDATASETSTATE), iptr);
  RegisterProperty(Uppercase(CS_FILTER), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_FILTERED), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_FILTEROPTIONS), Uppercase(CS_TFILTEROPTIONS), iptrw);
  RegisterProperty(Uppercase(CS_ACTIVE), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_AUTOCALCFIELDS), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_BEFOREOPEN), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTEROPEN), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFORECLOSE), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTERCLOSE), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFOREINSERT), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTERINSERT), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFOREEDIT), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTEREDIT), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFOREPOST), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTERPOST), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFORECANCEL), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTERCANCEL), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFOREDELETE), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTERDELETE), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFORESCROLL), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTERSCROLL), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_BEFOREREFRESH), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_AFTERREFRESH), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONCALCFIELDS), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONDELETEERROR), Uppercase(CS_TDATASETERROREVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONEDITERROR), Uppercase(CS_TDATASETERROREVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONFILTERRECORD), Uppercase(CS_TFILTERRECORDEVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONNEWRECORD), Uppercase(CS_TDATASETNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONPOSTERROR), Uppercase(CS_TDATASETERROREVENT), iptrw);
  end;
end;

procedure SIRegisterTPARAMS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TCOLLECTION),Uppercase(CS_TPARAMS)) do
  begin
  RegisterMethod(CS_procedure + ' ' + CS_ASSIGNVALUES + '( VALUE : ' + CS_TPARAMS + ')');
  RegisterMethod(CS_procedure + ' ' + CS_ADDPARAM + '( VALUE : ' + CS_TPARAM + ')');
  RegisterMethod(CS_procedure + ' ' + CS_REMOVEPARAM + '( VALUE : ' + CS_TPARAM + ')');
  RegisterMethod(CS_function + ' ' + CS_CREATEPARAM + '( FLDTYPE : ' + CS_TFIELDTYPE + '; ' + CS_const  + ' PARAMNAME : ' + CS_String + '; PARAMTYPE : ' + CS_TPARAMTYPE + ') : ' + CS_TPARAM);
//  RegisterMethod(CS_procedure + ' ' + CS_ GETPARAMLIST( LIST : TLIST; const PARAMNAMES : STRING)');
  RegisterMethod(CS_function + ' ' + CS_ISEQUAL + '( VALUE : ' + CS_TPARAMS + ') : ' + CS_BOOLEAN);
  RegisterMethod(CS_function + ' ' + CS_PARSESQL + '( SQL : ' + CS_String + '; DOCREATE : ' + CS_BOOLEAN + ') : ' + CS_String);
  RegisterMethod(CS_function + ' ' + CS_PARAMBYNAME + '( ' + CS_const + ' VALUE : ' + CS_String + ') : ' + CS_TPARAM);
  RegisterMethod(CS_function + ' ' + CS_FINDPARAM + '( ' + CS_const + ' VALUE : ' + CS_String + ') : ' + CS_TPARAM);
  RegisterProperty(Uppercase(CS_ITEMS), Uppercase(CS_TPARAM + ' ' + CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_PARAMVALUES), Uppercase(CS_VARIANT + ' ' + CS_String), iptrw);
  end;
end;

procedure SIRegisterTPARAM(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TCOLLECTIONITEM),Uppercase(CS_TPARAM)) do
  begin
  RegisterMethod(CS_procedure + ' ' + CS_ASSIGNFIELD + '( FIELD : ' + CS_TFIELD + ')');
  RegisterMethod(CS_procedure + ' ' + CS_ASSIGNFIELDVALUE + '( FIELD : ' + CS_TFIELD + '; ' + CS_const + ' VALUE : ' + CS_VARIANT + ')');
  RegisterMethod(CS_procedure + ' ' + CS_CLEAR);
//  RegisterMethod(CS_procedure + ' ' + CS_ GETDATA( BUFFER : POINTER)');
  RegisterMethod(CS_function + ' ' + CS_GETDATASIZE + ' : ' + CS_INTEGER);
  RegisterMethod(CS_procedure + ' ' + CS_LOADFROMFILE + '( ' + CS_const + ' FILENAME : ' + CS_String + '; BLOBTYPE : ' + CS_TBLOBTYPE + ')');
  RegisterMethod(CS_procedure + ' ' + CS_LOADFROMSTREAM + '( STREAM : ' + CS_TSTREAM + '; BLOBTYPE : ' + CS_TBLOBTYPE + ')');
//  RegisterMethod(CS_procedure + ' ' + CS_ SETBLOBDATA( BUFFER : POINTER; SIZE : INTEGER)');
//  RegisterMethod(CS_procedure + ' ' + CS_ SETDATA( BUFFER : POINTER)');
{$IFDEF DELPHI6UP}
  RegisterProperty(Uppercase(CS_ASBCD), Uppercase(CS_CURRENCY), iptrw);
{$ENDIF}
{$IFDEF DELPHI6UP}
  RegisterProperty(Uppercase(CS_ASFMTBCD), Uppercase(CS_TBCD), iptrw);
{$ENDIF}
  RegisterProperty(Uppercase(CS_ASBLOB), Uppercase(CS_TBLOBDATA), iptrw);
  RegisterProperty(Uppercase(CS_ASBOOLEAN), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_ASCURRENCY), Uppercase(CS_CURRENCY), iptrw);
  RegisterProperty(Uppercase(CS_ASDATE), Uppercase(CS_TDATETIME), iptrw);
  RegisterProperty(Uppercase(CS_ASDATETIME), Uppercase(CS_TDATETIME), iptrw);
  RegisterProperty(Uppercase(CS_ASFLOAT), Uppercase(CS_DOUBLE), iptrw);
  RegisterProperty(Uppercase(CS_ASINTEGER), Uppercase(CS_LONGINT), iptrw);
  RegisterProperty(Uppercase(CS_ASSMALLINT), Uppercase(CS_LONGINT), iptrw);
  RegisterProperty(Uppercase(CS_ASMEMO), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_ASSTRING), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_ASTIME), Uppercase(CS_TDATETIME), iptrw);
  RegisterProperty(Uppercase(CS_ASWORD), Uppercase(CS_LONGINT), iptrw);
  RegisterProperty(Uppercase(CS_BOUND), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_ISNULL), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_NATIVESTR), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_TEXT), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_DATATYPE), Uppercase(CS_TFIELDTYPE), iptrw);
{$IFDEF DELPHI6UP}
  RegisterProperty(Uppercase(CS_PRECISION), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_NUMERICSCALE), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_SIZE), Uppercase(CS_INTEGER), iptrw);
{$ENDIF}
  RegisterProperty(Uppercase(CS_NAME), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_PARAMTYPE), Uppercase(CS_TPARAMTYPE), iptrw);
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_VARIANT), iptrw);
  end;
end;

procedure SIRegisterTGUIDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TGUIDFIELD)) do
  begin
  end;
end;

procedure SIRegisterTVARIANTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TVARIANTFIELD)) do
  begin
  end;
end;

procedure SIRegisterTREFERENCEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TDATASETFIELD),Uppercase(CS_TREFERENCEFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_REFERENCETABLENAME), Uppercase(CS_String), iptrw);
  end;
end;

procedure SIRegisterTDATASETFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TOBJECTFIELD),Uppercase(CS_TDATASETFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_NESTEDDATASET), Uppercase(CS_TDATASET), iptr);
  RegisterProperty(Uppercase(CS_INCLUDEOBJECTFIELD), Uppercase(CS_BOOLEAN), iptrw);
  end;
end;

procedure SIRegisterTARRAYFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TOBJECTFIELD),Uppercase(CS_TARRAYFIELD)) do
  begin
  end;
end;

procedure SIRegisterTADTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TOBJECTFIELD),Uppercase(CS_TADTFIELD)) do
  begin
  end;
end;

procedure SIRegisterTOBJECTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TOBJECTFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_FIELDCOUNT), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_FIELDS), Uppercase(CS_TFIELDS), iptr);
  RegisterProperty(Uppercase(CS_FIELDVALUES), Uppercase(CS_VARIANT + ' ' + CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_UNNAMED), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_OBJECTTYPE), Uppercase(CS_String), iptrw);
  end;
end;

procedure SIRegisterTGRAPHICFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TBLOBFIELD),Uppercase(CS_TGRAPHICFIELD)) do
  begin
  end;
end;

procedure SIRegisterTMEMOFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TBLOBFIELD),Uppercase(CS_TMEMOFIELD)) do
  begin
  end;
end;

procedure SIRegisterTBLOBFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TBLOBFIELD)) do
  begin
  RegisterMethod(CS_procedure + ' ' + CS_LOADFROMFILE + '( ' + CS_const + ' FILENAME : ' + CS_String  + ')');
  RegisterMethod(CS_procedure + ' ' + CS_LOADFROMSTREAM + '( STREAM : ' + CS_TSTREAM + ')');
  RegisterMethod(CS_procedure + ' ' + CS_SAVETOFILE + '( ' + CS_const + ' FILENAME : ' + CS_String + ')');
  RegisterMethod(CS_procedure + ' ' + CS_SAVETOSTREAM + '( STREAM : ' + CS_TSTREAM + ')');
  RegisterProperty(Uppercase(CS_BLOBSIZE), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_MODIFIED), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_TRANSLITERATE), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_BLOBTYPE), Uppercase(CS_TBLOBTYPE), iptrw);
{$IFDEF DELPHI6UP}
  RegisterProperty(Uppercase(CS_GRAPHICHEADER), Uppercase(CS_BOOLEAN), iptrw);
{$ENDIF}
  end;
end;

{$IFDEF DELPHI6UP}
procedure SIRegisterTFMTBCDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TNUMERICFIELD),Uppercase(CS_TFMTBCDFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_TBCD), iptrw);
  RegisterProperty(Uppercase(CS_CURRENCY), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_MAXVALUE), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_MINVALUE), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_PRECISION), Uppercase(CS_INTEGER), iptrw);
  end;
end;
{$ENDIF}

procedure SIRegisterTBCDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TNUMERICFIELD),Uppercase(CS_TBCDFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_CURRENCY), iptrw);
  RegisterProperty(Uppercase(CS_CURRENCY), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_MAXVALUE), Uppercase(CS_CURRENCY), iptrw);
  RegisterProperty(Uppercase(CS_MINVALUE), Uppercase(CS_CURRENCY), iptrw);
  RegisterProperty(Uppercase(CS_PRECISION), Uppercase(CS_INTEGER), iptrw);
  end;
end;

procedure SIRegisterTVARBYTESFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TBYTESFIELD),Uppercase(CS_TVARBYTESFIELD)) do
  begin
  end;
end;

procedure SIRegisterTBYTESFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TBINARYFIELD),Uppercase(CS_TBYTESFIELD)) do
  begin
  end;
end;

procedure SIRegisterTBINARYFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TBINARYFIELD)) do
  begin
  end;
end;

procedure SIRegisterTTIMEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TDATETIMEFIELD),Uppercase(CS_TTIMEFIELD)) do
  begin
  end;
end;

procedure SIRegisterTDATEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TDATETIMEFIELD),Uppercase(CS_TDATEFIELD)) do
  begin
  end;
end;

procedure SIRegisterTDATETIMEFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TDATETIMEFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_TDATETIME), iptrw);
  RegisterProperty(Uppercase(CS_DISPLAYFORMAT), Uppercase(CS_String), iptrw);
  end;
end;

procedure SIRegisterTBOOLEANFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TBOOLEANFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_DISPLAYVALUES), Uppercase(CS_String), iptrw);
  end;
end;

procedure SIRegisterTCURRENCYFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFLOATFIELD),Uppercase(CS_TCURRENCYFIELD)) do
  begin
  end;
end;

procedure SIRegisterTFLOATFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TNUMERICFIELD),Uppercase(CS_TFLOATFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_DOUBLE), iptrw);
  RegisterProperty(Uppercase(CS_CURRENCY), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_MAXVALUE), Uppercase(CS_DOUBLE), iptrw);
  RegisterProperty(Uppercase(CS_MINVALUE), Uppercase(CS_DOUBLE), iptrw);
  RegisterProperty(Uppercase(CS_PRECISION), Uppercase(CS_INTEGER), iptrw);
  end;
end;

procedure SIRegisterTAUTOINCFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TINTEGERFIELD),Uppercase(CS_TAUTOINCFIELD)) do
  begin
  end;
end;

procedure SIRegisterTWORDFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TINTEGERFIELD),Uppercase(CS_TWORDFIELD)) do
  begin
  end;
end;

procedure SIRegisterTLARGEINTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TNUMERICFIELD),Uppercase(CS_TLARGEINTFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_ASLARGEINT), Uppercase(CS_LARGEINT), iptrw);
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_LARGEINT), iptrw);
  RegisterProperty(Uppercase(CS_MAXVALUE), Uppercase(CS_LARGEINT), iptrw);
  RegisterProperty(Uppercase(CS_MINVALUE), Uppercase(CS_LARGEINT), iptrw);
  end;
end;

procedure SIRegisterTSMALLINTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TINTEGERFIELD),Uppercase(CS_TSMALLINTFIELD)) do
  begin
  end;
end;

procedure SIRegisterTINTEGERFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TNUMERICFIELD),Uppercase(CS_TINTEGERFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_LONGINT), iptrw);
  RegisterProperty(Uppercase(CS_MAXVALUE), Uppercase(CS_LONGINT), iptrw);
  RegisterProperty(Uppercase(CS_MINVALUE), Uppercase(CS_LONGINT), iptrw);
  end;
end;

procedure SIRegisterTNUMERICFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TNUMERICFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_DISPLAYFORMAT), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_EDITFORMAT), Uppercase(CS_String), iptrw);
  end;
end;

procedure SIRegisterTWIDESTRINGFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TSTRINGFIELD),Uppercase(CS_TWIDESTRINGFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_WIDESTRING), iptrw);
  end;
end;

procedure SIRegisterTSTRINGFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFIELD),Uppercase(CS_TSTRINGFIELD)) do
  begin
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_FIXEDCHAR), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_TRANSLITERATE), Uppercase(CS_BOOLEAN), iptrw);
  end;
end;

procedure SIRegisterTFIELD(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TCOMPONENT),Uppercase(CS_TFIELD)) do
  begin
//RegisterMethod(CS_procedure + ' ' + CS_ ASSIGNVALUE( const VALUE : TVARREC)');
  RegisterMethod(CS_procedure + ' ' + CS_CLEAR);
  RegisterMethod(CS_procedure + ' ' + CS_FOCUSCONTROL);
//  RegisterMethod(CS_function + ' ' + CS_ GETDATA( BUFFER : POINTER; NATIVEFORMAT : BOOLEAN) : BOOLEAN');
  RegisterMethod(CS_function + ' ' + CS_ISVALIDCHAR + '( INPUTCHAR : ' + CS_CHAR + ') : ' + CS_BOOLEAN);
  RegisterMethod(CS_procedure + ' ' + CS_REFRESHLOOKUPLIST);
//  RegisterMethod(CS_procedure + ' ' + CS_ SETDATA( BUFFER : POINTER; NATIVEFORMAT : BOOLEAN)');
  RegisterMethod(CS_procedure + ' ' + CS_SETFIELDTYPE + '( VALUE : ' + CS_TFIELDTYPE + ')');
//  RegisterMethod(CS_procedure + ' ' + CS_ VALIDATE( BUFFER : POINTER)');
{$IFDEF DELPHI6UP}
  RegisterProperty(Uppercase(CS_ASBCD), Uppercase(CS_TBCD), iptrw);
{$ENDIF}
  RegisterProperty(Uppercase(CS_ASBOOLEAN), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_ASCURRENCY), Uppercase(CS_CURRENCY), iptrw);
  RegisterProperty(Uppercase(CS_ASDATETIME), Uppercase(CS_TDATETIME), iptrw);
  RegisterProperty(Uppercase(CS_ASFLOAT), Uppercase(CS_DOUBLE), iptrw);
  RegisterProperty(Uppercase(CS_ASINTEGER), Uppercase(CS_LONGINT), iptrw);
  RegisterProperty(Uppercase(CS_ASSTRING), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_ASVARIANT), Uppercase(CS_VARIANT), iptrw);
  RegisterProperty(Uppercase(CS_ATTRIBUTESET), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_CALCULATED), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_CANMODIFY), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_CURVALUE), Uppercase(CS_VARIANT), iptr);
  RegisterProperty(Uppercase(CS_DATASET), Uppercase(CS_TDATASET), iptrw);
  RegisterProperty(Uppercase(CS_DATASIZE), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_DATATYPE), Uppercase(CS_TFIELDTYPE), iptr);
  RegisterProperty(Uppercase(CS_DISPLAYNAME), Uppercase(CS_String), iptr);
  RegisterProperty(Uppercase(CS_DISPLAYTEXT), Uppercase(CS_String), iptr);
  RegisterProperty(Uppercase(CS_EDITMASK), Uppercase(CS_TEDITMASK), iptrw);
  RegisterProperty(Uppercase(CS_EDITMASKPTR), Uppercase(CS_TEDITMASK), iptr);
  RegisterProperty(Uppercase(CS_EDITMASK), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_EDITMASKPTR), Uppercase(CS_String), iptr);
  RegisterProperty(Uppercase(CS_FIELDNO), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_FULLNAME), Uppercase(CS_String), iptr);
  RegisterProperty(Uppercase(CS_ISINDEXFIELD), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_ISNULL), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_LOOKUP), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_LOOKUPLIST), Uppercase(CS_TLOOKUPLIST), iptr);
  RegisterProperty(Uppercase(CS_NEWVALUE), Uppercase(CS_VARIANT), iptrw);
  RegisterProperty(Uppercase(CS_OFFSET), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_OLDVALUE), Uppercase(CS_VARIANT), iptr);
  RegisterProperty(Uppercase(CS_PARENTFIELD), Uppercase(CS_TOBJECTFIELD), iptrw);
  RegisterProperty(Uppercase(CS_SIZE), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_TEXT), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_VALIDCHARS), Uppercase(CS_TFIELDCHARS), iptrw);
  RegisterProperty(Uppercase(CS_VALUE), Uppercase(CS_VARIANT), iptrw);
  RegisterProperty(Uppercase(CS_ALIGNMENT), Uppercase(CS_TALIGNMENT), iptrw);
  RegisterProperty(Uppercase(CS_AUTOGENERATEVALUE), Uppercase(CS_TAUTOREFRESHFLAG), iptrw);
  RegisterProperty(Uppercase(CS_CUSTOMCONSTRAINT), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_CONSTRAINTERRORMESSAGE), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_DEFAULTEXPRESSION), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_DISPLAYLABEL), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_DISPLAYWIDTH), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_FIELDKIND), Uppercase(CS_TFIELDKIND), iptrw);
  RegisterProperty(Uppercase(CS_FIELDNAME), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_HASCONSTRAINTS), Uppercase(CS_BOOLEAN), iptr);
  RegisterProperty(Uppercase(CS_INDEX), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_IMPORTEDCONSTRAINT), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_LOOKUPDATASET), Uppercase(CS_TDATASET), iptrw);
  RegisterProperty(Uppercase(CS_LOOKUPKEYFIELDS), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_LOOKUPRESULTFIELD), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_KEYFIELDS), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_LOOKUPCACHE), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_ORIGIN), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_PROVIDERFLAGS), Uppercase(CS_TPROVIDERFLAGS), iptrw);
  RegisterProperty(Uppercase(CS_READONLY), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_REQUIRED), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_VISIBLE), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_ONCHANGE), Uppercase(CS_TFIELDNOTIFYEVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONGETTEXT), Uppercase(CS_TFIELDGETTEXTEVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONSETTEXT), Uppercase(CS_TFIELDSETTEXTEVENT), iptrw);
  RegisterProperty(Uppercase(CS_ONVALIDATE), Uppercase(CS_TFIELDNOTIFYEVENT), iptrw);
  end;
end;

procedure SIRegisterTLOOKUPLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TOBJECT),Uppercase(CS_TLOOKUPLIST)) do
  begin
  RegisterMethod(CS_constructor + ' ' + CS_CREATE);
  RegisterMethod(CS_procedure + ' ' + CS_ADD + '( ' + CS_const + ' AKEY, AVALUE : ' + CS_VARIANT + ')');
  RegisterMethod(CS_procedure + ' ' + CS_CLEAR);
  RegisterMethod(CS_function + ' ' + CS_VALUEOFKEY + '( ' + CS_const + ' AKEY : ' + CS_VARIANT + ') : ' + CS_VARIANT);
  end;
end;

procedure SIRegisterTFIELDS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TOBJECT),Uppercase(CS_TFIELDS)) do
  begin
  RegisterMethod(CS_constructor + ' ' + CS_CREATE + '( ADATASET : ' + CS_TDATASET + ')');
  RegisterMethod(CS_procedure + ' ' + CS_ADD + '( FIELD : ' + CS_TFIELD + ')');
  RegisterMethod(CS_procedure + ' ' + CS_CHECKFIELDNAME + '( ' + CS_const + ' FIELDNAME : ' + CS_String + ')');
  RegisterMethod(CS_procedure + ' ' + CS_CHECKFIELDNAMES + '( ' + CS_const + ' FIELDNAMES : ' + CS_String + ')');
  RegisterMethod(CS_procedure + ' ' + CS_CLEAR);
  RegisterMethod(CS_function + ' ' + CS_FINDFIELD + '( ' + CS_const + ' FIELDNAME : ' + CS_String + ' ) : ' + CS_TFIELD);
  RegisterMethod(CS_function + ' ' + CS_FIELDBYNAME + '( ' + CS_const + ' FIELDNAME : ' + CS_String + ') : ' + CS_TFIELD);
  RegisterMethod(CS_function + ' ' + CS_FIELDBYNUMBER + '( FIELDNO : ' + CS_INTEGER + ') : ' + CS_TFIELD);
  RegisterMethod(CS_procedure + ' ' + CS_GETFIELDNAMES + '( LIST : ' + CS_TSTRINGS + ')');
  RegisterMethod(CS_function + ' ' + CS_INDEXOF + '( FIELD : ' + CS_TFIELD + ') : ' + CS_INTEGER);
  RegisterMethod(CS_procedure + ' ' + CS_REMOVE + '( FIELD : ' + CS_TFIELD + ')');
  RegisterProperty(Uppercase(CS_COUNT), Uppercase(CS_INTEGER), iptr);
  RegisterProperty(Uppercase(CS_DATASET), Uppercase(CS_TDATASET), iptr);
  RegisterProperty(Uppercase(CS_FIELDS), Uppercase(CS_TFIELD + ' ' + CS_INTEGER), iptrw);
  end;
end;

procedure SIRegisterTFIELDLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFLATLIST),Uppercase(CS_TFIELDLIST)) do
  begin
  RegisterMethod(CS_function + ' ' + CS_FIELDBYNAME + '( ' + CS_const + ' NAME : ' + CS_String + ') : ' + CS_TFIELD);
  RegisterMethod(CS_function + ' ' + CS_FIND + '( ' + CS_const + ' NAME : ' + CS_String + ') : ' + CS_TFIELD);
  RegisterProperty(Uppercase(CS_FIELDS), Uppercase(CS_TFIELD + ' ' + CS_INTEGER), iptr);
  end;
end;

procedure SIRegisterTFIELDDEFLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TFLATLIST),Uppercase(CS_TFIELDDEFLIST)) do
  begin
  RegisterMethod(CS_function + ' ' + CS_FIELDBYNAME + '( ' + CS_const + ' NAME : ' + CS_String + ') : ' + CS_TFIELDDEF);
  RegisterMethod(CS_function + ' ' + CS_FIND + '( ' + CS_const + ' NAME : ' + CS_String + ') : ' + CS_TFIELDDEF);
  RegisterProperty(Uppercase(CS_FIELDDEFS), Uppercase(CS_TFIELDDEF + ' ' + CS_INTEGER), iptr);
  end;
end;

procedure SIRegisterTFLATLIST(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TSTRINGLIST),Uppercase(CS_TFLATLIST)) do
  begin
  RegisterMethod(CS_constructor + ' ' + CS_CREATE + '( ADATASET : ' + CS_TDATASET + ')');
  RegisterMethod(CS_procedure + ' ' + CS_UPDATE);
  RegisterProperty(Uppercase(CS_DATASET), Uppercase(CS_TDATASET), iptr);
  end;
end;

procedure SIRegisterTINDEXDEFS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TDEFCOLLECTION),Uppercase(CS_TINDEXDEFS)) do
  begin
  RegisterMethod(CS_constructor + ' ' + CS_CREATE + '( ADATASET : ' + CS_TDATASET + ')');
  RegisterMethod(CS_function + ' ' + CS_ADDINDEXDEF + ' : ' + CS_TINDEXDEF);
  RegisterMethod(CS_function + ' ' + CS_FIND + '( ' + CS_const + ' NAME : ' + CS_String + ') : ' + CS_TINDEXDEF);
  RegisterMethod(CS_procedure + ' ' + CS_UPDATE);
  RegisterMethod(CS_function + ' ' + CS_FINDINDEXFORFIELDS + '( ' + CS_const + ' FIELDS : ' + CS_String + ') : ' + CS_TINDEXDEF);
  RegisterMethod(CS_function + ' ' + CS_GETINDEXFORFIELDS + '( ' + CS_const + ' FIELDS : ' + CS_String + '; CASEINSENSITIVE : ' + CS_BOOLEAN + ') : ' + CS_TINDEXDEF);
  RegisterMethod(CS_procedure + ' ' + CS_ADD + '( ' + CS_const + ' NAME, FIELDS : ' + CS_String + '; OPTIONS : ' + CS_TINDEXOPTIONS + ')');
  RegisterProperty(Uppercase(CS_ITEMS), Uppercase(CS_TINDEXDEF + ' ' + CS_INTEGER), iptrw);
  end;
end;

procedure SIRegisterTINDEXDEF(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TNAMEDITEM),Uppercase(CS_TINDEXDEF)) do
  begin
  RegisterMethod(CS_constructor + ' ' + CS_CREATE + '( OWNER : ' + CS_TINDEXDEFS + '; ' + CS_const + ' NAME, FIELDS : ' + CS_String + '; OPTIONS : ' + CS_TINDEXOPTIONS + ')');
  RegisterProperty(Uppercase(CS_FIELDEXPRESSION), Uppercase(CS_String), iptr);
  RegisterProperty(Uppercase(CS_CASEINSFIELDS), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_DESCFIELDS), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_EXPRESSION), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_FIELDS), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_OPTIONS), Uppercase(CS_TINDEXOPTIONS), iptrw);
  RegisterProperty(Uppercase(CS_SOURCE), Uppercase(CS_String), iptrw);
  RegisterProperty(Uppercase(CS_GROUPINGLEVEL), Uppercase(CS_INTEGER), iptrw);
  end;
end;

procedure SIRegisterTFIELDDEFS(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TDEFCOLLECTION),Uppercase(CS_TFIELDDEFS)) do
  begin
  RegisterMethod(CS_constructor + ' ' + CS_CREATE + '( AOWNER : ' + CS_TPERSISTENT + ')');
  RegisterMethod(CS_function + ' ' + CS_ADDFIELDDEF + ' : ' + CS_TFIELDDEF);
  RegisterMethod(CS_function + ' ' + CS_FIND + '( ' + CS_const + ' NAME : ' + CS_String + ') : ' + CS_TFIELDDEF);
  RegisterMethod(CS_procedure + ' ' + CS_UPDATE);
  RegisterMethod(CS_procedure + ' ' + CS_ADD + '( ' + CS_const + ' NAME : ' + CS_String + '; DATATYPE : ' + CS_TFIELDTYPE + '; SIZE : ' + CS_INTEGER + '; REQUIRED : ' + CS_BOOLEAN + ')');
  RegisterProperty(Uppercase(CS_HIDDENFIELDS), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_ITEMS), Uppercase(CS_TFIELDDEF + ' ' + CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_PARENTDEF), Uppercase(CS_TFIELDDEF), iptr);
  end;
end;

procedure SIRegisterTFIELDDEF(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TNAMEDITEM),Uppercase(CS_TFIELDDEF)) do
  begin
//  RegisterMethod('CS_constructor + ' ' + CS_ CREATE( OWNER : TFIELDDEFS; const NAME : STRING; DATATYPE : TFIELDTYPE; SIZE : INTEGER; REQUIRED : BOOLEAN; FIELDNO : INTEGER)');
  RegisterMethod(CS_function + ' ' + CS_ADDCHILD + ' : ' + CS_TFIELDDEF);
  RegisterMethod(CS_function + ' ' + CS_CREATEFIELD + '( OWNER : ' + CS_TCOMPONENT + '; PARENTFIELD : ' + CS_TOBJECTFIELD + '; ' + CS_const + ' FIELDNAME : ' + CS_String + '; CREATECHILDREN : ' + CS_BOOLEAN + ') : ' + CS_TFIELD);
  RegisterMethod(CS_function + ' ' + CS_HASCHILDDEFS + ' : ' + CS_BOOLEAN);
  RegisterProperty(Uppercase(CS_FIELDCLASS), Uppercase(CS_TFIELDCLASS), iptr);
  RegisterProperty(Uppercase(CS_FIELDNO), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_INTERNALCALCFIELD), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_PARENTDEF), Uppercase(CS_TFIELDDEF), iptr);
  RegisterProperty(Uppercase(CS_REQUIRED), Uppercase(CS_BOOLEAN), iptrw);
  RegisterProperty(Uppercase(CS_ATTRIBUTES), Uppercase(CS_TFIELDATTRIBUTES), iptrw);
  RegisterProperty(Uppercase(CS_CHILDDEFS), Uppercase(CS_TFIELDDEFS), iptrw);
  RegisterProperty(Uppercase(CS_DATATYPE), Uppercase(CS_TFIELDTYPE), iptrw);
  RegisterProperty(Uppercase(CS_PRECISION), Uppercase(CS_INTEGER), iptrw);
  RegisterProperty(Uppercase(CS_SIZE), Uppercase(CS_INTEGER), iptrw);
  end;
end;

procedure SIRegisterTDEFCOLLECTION(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TOWNEDCOLLECTION),Uppercase(CS_TDEFCOLLECTION)) do
  begin
//  RegisterMethod('CS_constructor + ' ' + CS_ CREATE( ADATASET : TDATASET; AOWNER : TPERSISTENT; ACLASS : TCOLLECTIONITEMCLASS)');
  RegisterMethod(CS_function + ' ' + CS_FIND + '( ' + CS_const + ' ANAME : ' + CS_String + ') : ' + CS_TNAMEDITEM);
  RegisterMethod(CS_procedure + ' ' + CS_GETITEMNAMES + '( LIST : ' + CS_TSTRINGS + ')');
  RegisterMethod(CS_function + ' ' + CS_INDEXOF + '( ' + CS_const + ' ANAME : ' + CS_String + ') : ' + CS_INTEGER);
  RegisterProperty(Uppercase(CS_DATASET), Uppercase(CS_TDATASET), iptr);
  RegisterProperty(Uppercase(CS_UPDATED), Uppercase(CS_BOOLEAN), iptrw);
  end;
end;

procedure SIRegisterTNAMEDITEM(CL: TPSPascalCompiler);
Begin
With RegClassS(cl,Uppercase(CS_TCOLLECTIONITEM),Uppercase(CS_TNAMEDITEM)) do
  begin
  RegisterProperty(Uppercase(CS_NAME), Uppercase(CS_String), iptrw);
  end;
end;

procedure SIRegister_DB(Cl: TPSPascalCompiler);
Begin
cl.AddTypeS(Uppercase(CS_TFieldType), '(' + CS_ftUnknown + ', ' + CS_ftString + ', ' + CS_ftSmallint + ', ' + CS_ftInteger + ', ' + CS_ftWord + ', ' + CS_ftBoolean + ', ' + CS_ftFloat + ', ' + CS_ftCurrency + ', ' + CS_ftBCD + ', ' + CS_ftDate + ', ' + CS_ftTime + ', ' + CS_ftDateTime
     + ', ' + CS_ftBytes + ', ' + CS_ftVarBytes + ', ' + CS_ftAutoInc + ', ' + CS_ftBlob + ', ' + CS_ftMemo + ', ' + CS_ftGraphic + ', ' + CS_ftFmtMemo + ', ' + CS_ftParadoxOle + ', ' + CS_ftDBaseOle + ', ' + CS_ftTypedBinary + ', ' + CS_ftCursor + ', ' + CS_ftFixedChar + ', ' + CS_ftWideString
     + ', ' + CS_ftLargeint + ', ' + CS_ftADT + ', ' + CS_ftArray + ', ' + CS_ftReference + ', ' + CS_ftDataSet + ', ' + CS_ftOraBlob + ', ' + CS_ftOraClob + ', ' + CS_ftVariant + ', ' + CS_ftInterface + ', ' + CS_ftIDispatch + ', ' + CS_ftGuid + ', ' + CS_ftTimeStamp + ', ' + CS_ftFMTBcd + ')');

  CL.AddTypeS(Uppercase(CS_TDataSetState), '(' + CS_dsInactive + ', ' + CS_dsBrowse + ', ' + CS_dsEdit + ', ' + CS_dsInsert + ', ' + CS_dsSetKey + ', ' + CS_dsCalcFields + ', ' + CS_dsFilter + ', ' + CS_dsNewValue + ', ' + CS_dsOldValue + ', ' + CS_dsCurValue + ', ' + CS_dsBlockRead + ', ' + CS_dsInternalCalc + ', ' + CS_dsOpening + ')');

cl.addTypeS(Uppercase(CS_TLocateOption),'(' + CS_loCaseInsensitive + ', ' + CS_loPartialKey + ')');
cl.addtypes(Uppercase(CS_TLocateOptions),CS_set_of + CS_TLocateOption);
cl.addtypes(Uppercase(CS_TUpdateStatus),'(' + CS_usUnmodified + ', ' + CS_usModified + ', ' + CS_usInserted + ', ' + CS_usDeleted + ')');
cl.addtypes(Uppercase(CS_TUpdateStatusSet), CS_set_of + CS_TUpdateStatus);

    cl.addTypeS(Uppercase(CS_TPARAMTYPE), Uppercase(CS_BYTE));
RegClassS(cl,Uppercase(CS_TComponent),Uppercase(CS_TDATASET));
RegClassS(cl,Uppercase(CS_TComponent),Uppercase(CS_TFIELD));
RegClassS(cl,Uppercase(CS_TComponent),Uppercase(CS_TFIELDDEFS));
RegClassS(cl,Uppercase(CS_TComponent),Uppercase(CS_TINDEXDEFS));
RegClassS(cl, Uppercase(CS_TComponent), Uppercase(CS_TObjectField));
RegClassS(cl, Uppercase(CS_TComponent), Uppercase(CS_TDataLink));
RegClassS(cl, Uppercase(CS_TComponent), Uppercase(CS_TDataSource));
RegClassS(cl, Uppercase(CS_TComponent), Uppercase(CS_TParam));

SIRegisterTNAMEDITEM(Cl);
Cl.addTypeS(Uppercase(CS_TDEFUPDATEMETHOD), Uppercase(CS_Procedure));
SIRegisterTDEFCOLLECTION(Cl);
cl.AddConstantN(Uppercase(CS_FAHIDDENCOL),Uppercase(CS_LONGINT)).Value.tu32 := 1;
cl.AddConstantN(Uppercase(CS_FAREADONLY),Uppercase(CS_LONGINT)).Value.tu32 := 2;
cl.AddConstantN(Uppercase(CS_FAREQUIRED),Uppercase(CS_LONGINT)).Value.tu32 := 4;
cl.AddConstantN(Uppercase(CS_FALINK),Uppercase(CS_LONGINT)).Value.tu32 := 8;
cl.AddConstantN(Uppercase(CS_FAUNNAMED),Uppercase(CS_LONGINT)).Value.tu32 := 16;
cl.AddConstantN(Uppercase(CS_FAFIXED),Uppercase(CS_LONGINT)).Value.tu32 := 32;
cl.addTypeS(Uppercase(CS_TFIELDATTRIBUTES), Uppercase(CS_BYTE));
SIRegisterTFIELDDEF(Cl);
SIRegisterTFIELDDEFS(Cl);
cl.AddConstantN(Uppercase(CS_IXPRIMARY),Uppercase(CS_LONGINT)).Value.tu32 := 1;
cl.AddConstantN(Uppercase(CS_IXUNIQUE),Uppercase(CS_LONGINT)).Value.tu32 := 2;
cl.AddConstantN(Uppercase(CS_IXDESCENDING),Uppercase(CS_LONGINT)).Value.tu32 := 4;
cl.AddConstantN(Uppercase(CS_IXCASEINSENSITIVE),Uppercase(CS_LONGINT)).Value.tu32 := 8;
cl.AddConstantN(Uppercase(CS_IXEXPRESSION),Uppercase(CS_LONGINT)).Value.tu32 := 16;
cl.AddConstantN(Uppercase(CS_IXNONMAINTAINED),Uppercase(CS_LONGINT)).Value.tu32 := 32;
cl.addTypeS(Uppercase(CS_TINDEXOPTIONS), Uppercase(CS_BYTE));
SIRegisterTINDEXDEF(Cl);
SIRegisterTINDEXDEFS(Cl);
SIRegisterTFLATLIST(Cl);
SIRegisterTFIELDDEFLIST(Cl);
SIRegisterTFIELDLIST(Cl);
cl.AddConstantN(Uppercase(CS_FKDATA),Uppercase(CS_LONGINT)).Value.tu32 := 1;
cl.AddConstantN(Uppercase(CS_FKCALCULATED),Uppercase(CS_LONGINT)).Value.tu32 := 2;
cl.AddConstantN(Uppercase(CS_FKLOOKUP),Uppercase(CS_LONGINT)).Value.tu32 := 4;
cl.AddConstantN(Uppercase(CS_FKINTERNALCALC),Uppercase(CS_LONGINT)).Value.tu32 := 8;
cl.AddConstantN(Uppercase(CS_FKAGGREGATE),Uppercase(CS_LONGINT)).Value.tu32 := 16;
cl.addTypeS(Uppercase(CS_TFIELDKINDS), Uppercase(CS_BYTE));
SIRegisterTFIELDS(Cl);
cl.AddConstantN(Uppercase(CS_PFINUPDATE),Uppercase(CS_LONGINT)).Value.tu32 := 1;
cl.AddConstantN(Uppercase(CS_PFINWHERE),Uppercase(CS_LONGINT)).Value.tu32 := 2;
cl.AddConstantN(Uppercase(CS_PFINKEY),Uppercase(CS_LONGINT)).Value.tu32 := 4;
cl.AddConstantN(Uppercase(CS_PFHIDDEN),Uppercase(CS_LONGINT)).Value.tu32 :=8;
cl.addTypeS(Uppercase(CS_TPROVIDERFLAGS), Uppercase(CS_BYTE));
cl.addTypeS(Uppercase(CS_TFIELDNOTIFYEVENT), CS_procedure + '( SENDER : ' + CS_TFIELD + ')');
cl.addTypeS(Uppercase(CS_TFIELDGETTEXTEVENT), CS_procedure + '( SENDER : ' + CS_TFIELD+ ' ; ' + CS_var + ' TEXT :'
   + CS_STRING + '; DISPLAYTEXT : ' + CS_BOOLEAN + ')');
cl.addTypeS(Uppercase(CS_TFIELDSETTEXTEVENT), CS_procedure + '( SENDER : ' + CS_TFIELD + '; ' + CS_const + ' TEXT :'
   + CS_String + ')');
cl.addTypeS(Uppercase(CS_TAUTOREFRESHFLAG), '(' + CS_ARNONE + ', ' + CS_ARAUTOINC + ', ' + CS_ARDEFAULT + ' )');
SIRegisterTLOOKUPLIST(Cl);
SIRegisterTFIELD(Cl);
SIRegisterTSTRINGFIELD(Cl);
SIRegisterTWIDESTRINGFIELD(Cl);
SIRegisterTNUMERICFIELD(Cl);
SIRegisterTINTEGERFIELD(Cl);
SIRegisterTSMALLINTFIELD(Cl);
cl.addTypeS(Uppercase(CS_LARGEINT), Uppercase(CS_INT64));
SIRegisterTLARGEINTFIELD(Cl);
SIRegisterTWORDFIELD(Cl);
SIRegisterTAUTOINCFIELD(Cl);
SIRegisterTFLOATFIELD(Cl);
SIRegisterTCURRENCYFIELD(Cl);
SIRegisterTBOOLEANFIELD(Cl);
SIRegisterTDATETIMEFIELD(Cl);
SIRegisterTDATEFIELD(Cl);
SIRegisterTTIMEFIELD(Cl);
SIRegisterTBINARYFIELD(Cl);
SIRegisterTBYTESFIELD(Cl);
SIRegisterTVARBYTESFIELD(Cl);
SIRegisterTBCDFIELD(Cl);
{$IFDEF DELPHI6UP}
SIRegisterTFMTBCDFIELD(Cl);
{$ENDIF}
cl.addTypeS(Uppercase(CS_TBLOBTYPE), Uppercase(CS_BYTE));
SIRegisterTBLOBFIELD(Cl);
SIRegisterTMEMOFIELD(Cl);
SIRegisterTGRAPHICFIELD(Cl);
SIRegisterTOBJECTFIELD(Cl);
SIRegisterTADTFIELD(Cl);
SIRegisterTARRAYFIELD(Cl);
SIRegisterTDATASETFIELD(Cl);
SIRegisterTREFERENCEFIELD(Cl);
SIRegisterTVARIANTFIELD(Cl);
SIRegisterTGUIDFIELD(Cl);
cl.addTypeS(Uppercase(CS_TBLOBDATA), Uppercase(CS_STRING));
cl.AddConstantN(Uppercase(CS_PTUNKNOWN),Uppercase(CS_LONGINT)).Value.tu32 := 1;
cl.AddConstantN(Uppercase(CS_PTINPUT),Uppercase(CS_LONGINT)).Value.tu32 := 2;
cl.AddConstantN(Uppercase(CS_PTOUTPUT),Uppercase(CS_LONGINT)).Value.tu32 := 4;
cl.AddConstantN(Uppercase(CS_PTINPUTOUTPUT),Uppercase(CS_LONGINT)).Value.tu32 := 8;
cl.AddConstantN(Uppercase(CS_PTRESULT),Uppercase(CS_LONGINT)).Value.tu32 := 16;
RegClassS(cl,Uppercase(CS_TObject),Uppercase(CS_TPARAMS));
SIRegisterTPARAM(Cl);
SIRegisterTPARAMS(Cl);
cl.addTypeS(Uppercase(CS_TDATAACTION), '(' + CS_DAFAIL + ', ' + CS_DAABORT + ', ' + CS_DARETRY + ')');
cl.addTypeS(Uppercase(CS_TBLOBSTREAMMODE), '( ' + CS_BMREAD + ', ' + CS_BMWRITE + ', ' + CS_BMREADWRITE + ' )');
cl.addTypeS(Uppercase(CS_TDATAOPERATION), CS_procedure);
cl.addTypeS(Uppercase(CS_TDATASETNOTIFYEVENT), CS_procedure + '( DATASET : ' + CS_TDATASET + ')');
cl.addTypeS(Uppercase(CS_TDATASETERROREVENT), CS_procedure + '( DATASET : ' + CS_TDATASET + '; E : ' + CS_TObject
   +'; ' + CS_var + ' ACTION : ' + CS_TDATAACTION+ ')');
cl.addTypeS(Uppercase(CS_TFILTERRECORDEVENT), CS_procedure + '( DATASET : ' + CS_TDATASET + '; ' + CS_var + ' ACCEPT : ' + CS_BOOLEAN + ')');
SIRegisterTDATASET(Cl);
end;

{$IFDEF USEIMPORTER}
initialization
CIImporter.AddCallBack(@SIRegister_DB,PT_ClassImport);
{$ENDIF}
end.
